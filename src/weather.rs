use reqwest;
use reqwest::header;
use serde::Deserialize;
use std::env;
use rand::{Rng, thread_rng};

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Coord {
    lon: f64,
    lat: f64,
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Weather {
    id: u32,
    main: String,
    description: String,
    icon: String,
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Main {
    pub temp: f64,
    pub feels_like: f64,
    pub temp_min: f64,
    pub temp_max: f64,
    pub pressure: u32,
    pub humidity: u32,
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Wind {
    pub speed: f64,
    deg: u32,
}

impl Wind {
    //public method to get wind speed in meters per second
    pub fn get_speed_meters_per_sec(&self) -> f64 {
        self.speed
    }

    //public method to get wind speed in miles per hour
    pub fn get_speed_mph(&self) -> f64 {
        self.speed * 2.23694 // Convert m/s to mph
    }
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Rain {
    #[serde(rename = "1h")]
    rain_1h: f64,
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Clouds {
    pub all: u32,
}

#[allow(dead_code)]
impl Clouds {
    pub fn get_cloud_coverage(&self) -> u32 {
        self.all
    }
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct Sys {
    pub country: String,
    pub sunrise: u64,
    pub sunset: u64,
}

#[derive(Debug, Deserialize)]
#[allow(dead_code)]
pub struct WeatherResponse {
    pub coord: Coord,
    pub weather: Vec<Weather>,
    pub main: Main,
    pub wind: Wind,
    pub rain: Option<Rain>,
    pub clouds: Clouds,
    pub sys: Sys,
    pub name: String,
}

pub async fn get_weather(
    city: &str,
) -> Result<WeatherResponse, Box<dyn std::error::Error + Send + Sync>> {
    let mut headers = header::HeaderMap::new();
    let api_key = env::var("API_KEY")?;
    headers.insert(
        "X-RapidAPI-Host",
        "weather-api138.p.rapidapi.com".parse().unwrap(),
    );
    headers.insert("X-RapidAPI-Key", api_key.parse().unwrap());

    let client = reqwest::Client::builder().build()?;
    
    let res = client
        .get(&format!(
            "https://weather-api138.p.rapidapi.com/weather?city_name={}",
            city
        ))
        .headers(headers)
        .send()
        .await?;
    
    if res.status().is_success() {
        let body = res.text().await?;
        let weather_response: WeatherResponse = serde_json::from_str(&body)?;
        Ok(weather_response)
    } else {
        Err(format!("Request failed with status code: {}", res.status()).into())
    }
}
pub fn get_random_city() -> (&'static str, &'static str, &'static str) {
    let cities = vec![
        ("New York", "USA", "ğŸ‡ºğŸ‡¸"), ("Los Angeles", "USA", "ğŸ‡ºğŸ‡¸"), ("Miami", "USA", "ğŸ‡ºğŸ‡¸"), ("Honolulu", "USA", "ğŸ‡ºğŸ‡¸"),
        ("Vancouver", "Canada", "ğŸ‡¨ğŸ‡¦"), ("Toronto", "Canada", "ğŸ‡¨ğŸ‡¦"), ("Mexico City", "Mexico", "ğŸ‡²ğŸ‡½"), ("Monterrey", "Mexico", "ğŸ‡²ğŸ‡½"),
        ("London", "UK", "ğŸ‡¬ğŸ‡§"), ("Manchester", "UK", "ğŸ‡¬ğŸ‡§"), ("Munich", "Germany", "ğŸ‡©ğŸ‡ª"), ("Berlin", "Germany", "ğŸ‡©ğŸ‡ª"),
        ("Madrid", "Spain", "ğŸ‡ªğŸ‡¸"), ("Barcelona", "Spain", "ğŸ‡ªğŸ‡¸"), ("Milan", "Italy", "ğŸ‡®ğŸ‡¹"), ("Rome", "Italy", "ğŸ‡®ğŸ‡¹"),
        ("Paris", "France", "ğŸ‡«ğŸ‡·"), ("Marseille", "France", "ğŸ‡«ğŸ‡·"), ("Glasgow", "UK", "ğŸ‡¬ğŸ‡§"),
        ("Copenhagen", "Denmark", "ğŸ‡©ğŸ‡°"), ("Oslo", "Norway", "ğŸ‡³ğŸ‡´"), ("Stockholm", "Sweden", "ğŸ‡¸ğŸ‡ª"), ("Helsinki", "Finland", "ğŸ‡«ğŸ‡®"),
        ("Moscow", "Russia", "ğŸ‡·ğŸ‡º"), ("Kyiv", "Ukraine", "ğŸ‡ºğŸ‡¦"), ("Warsaw", "Poland", "ğŸ‡µğŸ‡±"), ("Prague", "Czechia", "ğŸ‡¨ğŸ‡¿"),
        ("Amsterdam", "Netherlands", "ğŸ‡³ğŸ‡±"), ("Brussels", "Belgium", "ğŸ‡§ğŸ‡ª"), ("Bern", "Switzerland", "ğŸ‡¨ğŸ‡­"), ("Vienna", "Austria", "ğŸ‡¦ğŸ‡¹"),
        ("Budapest", "Hungary", "ğŸ‡­ğŸ‡º"), ("Zagreb", "Croatia", "ğŸ‡­ğŸ‡·"), ("Bucharest", "Romania", "ğŸ‡·ğŸ‡´"), ("Athens", "Greece", "ğŸ‡¬ğŸ‡·"),
        ("Lisbon", "Portugal", "ğŸ‡µğŸ‡¹"), ("Istanbul", "Turkey", "ğŸ‡¹ğŸ‡·"), ("Casablanca", "Morocco", "ğŸ‡²ğŸ‡¦"), ("Baku", "Azerbaijan", "ğŸ‡¦ğŸ‡¿"),
        ("Cairo", "Egypt", "ğŸ‡ªğŸ‡¬"), ("Riyadh", "Saudi Arabia", "ğŸ‡¸ğŸ‡¦"), ("Doha", "Qatar", "ğŸ‡¶ğŸ‡¦"), ("Dubai", "UAE", "ğŸ‡¦ğŸ‡ª"),
        ("Muscat", "Oman", "ğŸ‡´ğŸ‡²"), ("Tehran", "Iran", "ğŸ‡®ğŸ‡·"), ("Lagos", "Nigeria", "ğŸ‡³ğŸ‡¬"), ("Dakar", "Senegal", "ğŸ‡¸ğŸ‡³"), ("Cape Town", "South Africa", "ğŸ‡¿ğŸ‡¦"),
        ("Mumbai", "India", "ğŸ‡®ğŸ‡³"), ("Dhaka", "Bangladesh", "ğŸ‡§ğŸ‡©"), ("Bangkok", "Thailand", "ğŸ‡¹ğŸ‡­"), ("Kuala Lumpur", "Malaysia", "ğŸ‡²ğŸ‡¾"),
        ("Tokyo", "Japan", "ğŸ‡¯ğŸ‡µ"), ("Seoul", "South Korea", "ğŸ‡°ğŸ‡·"), ("Beijing", "China", "ğŸ‡¨ğŸ‡³"), ("Shanghai", "China", "ğŸ‡¨ğŸ‡³"),
        ("Sydney", "Australia", "ğŸ‡¦ğŸ‡º"), ("Perth", "Australia", "ğŸ‡¦ğŸ‡º"), ("Melbourne", "Australia", "ğŸ‡¦ğŸ‡º"), ("Auckland", "New Zealand", "ğŸ‡³ğŸ‡¿"),
        ("ReykjavÃ­k", "Iceland", "ğŸ‡®ğŸ‡¸"), ("Nairobi", "Kenya", "ğŸ‡°ğŸ‡ª"), ("Harare", "Zimbabwe", "ğŸ‡¿ğŸ‡¼"), ("Luanda", "Angola", "ğŸ‡¦ğŸ‡´"),
        ("Libreville", "Gabon", "ğŸ‡¬ğŸ‡¦"), ("Lusaka", "Zambia", "ğŸ‡¿ğŸ‡²"), ("Freetown", "Sierra Leone", "ğŸ‡¸ğŸ‡±"), ("Algiers", "Algeria", "ğŸ‡©ğŸ‡¿"),
        ("Rio de Janeiro", "Brazil", "ğŸ‡§ğŸ‡·"), ("Buenos Aires", "Argentina", "ğŸ‡¦ğŸ‡·"), ("Montevideo", "Uruguay", "ğŸ‡ºğŸ‡¾"),
        ("Santiago", "Chile", "ğŸ‡¨ğŸ‡±"), ("Lima", "Peru", "ğŸ‡µğŸ‡ª"), ("La Paz", "Bolivia", "ğŸ‡§ğŸ‡´"), ("MedellÃ­n", "Colombia", "ğŸ‡¨ğŸ‡´"),
        ("Panama City", "Panama", "ğŸ‡µğŸ‡¦"), ("San Jose", "Costa Rica", "ğŸ‡¨ğŸ‡·"), ("San Salvador", "El Salvador", "ğŸ‡¸ğŸ‡»"),
        ("Havana", "Cuba", "ğŸ‡¨ğŸ‡º"), ("Guatemala City", "Guatemala", "ğŸ‡¬ğŸ‡¹"), ("Tegucigalpa", "Honduras", "ğŸ‡­ğŸ‡³"), ("Managua", "Nicaragua", "ğŸ‡³ğŸ‡®"),
        ("Kingston", "Jamaica", "ğŸ‡¯ğŸ‡²"), ("Santo Domingo", "Dominican Replublic", "ğŸ‡©ğŸ‡´"), ("Bridgetown", "Barbados", "ğŸ‡§ğŸ‡§"),
        ("Suva", "Fiji", "ğŸ‡«ğŸ‡¯"), ("Port Moresby", "Papua New Guinea", "ğŸ‡µğŸ‡¬"), ("Ulaanbaatar", "Mongolia", "ğŸ‡²ğŸ‡³")

    ];
    // This creates a local variable `rng`
    let mut rng = thread_rng();

    //let idx = rand::thread_rng().gen_range(0..cities.len());
    let idx = rng.gen_range(0..cities.len());
    cities[idx]
}


